// components/FormSteps.jsx
import React from 'react';
import { User, Building2 } from 'lucide-react';
import { InputField, SelectField } from './FormInputs';
import { FileUploadArea } from './FileUpload';

// Simple validation helpers
const validators = {
  companyName: (value) => {
    if (!value) return 'T√™n c√¥ng ty l√† b·∫Øt bu·ªôc';
    if (value.trim().length < 4) return 'T√™n c√¥ng ty ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±';
    return null;
  },
  
  address: (value) => {
    if (!value) return 'ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc';
    if (value.trim().length < 10) return 'ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
    
    // Ki·ªÉm tra c√≥ ch·ª©a s·ªë nh√†
    const hasNumber = /\d/.test(value);
    if (!hasNumber) return 'ƒê·ªãa ch·ªâ ph·∫£i ch·ª©a s·ªë nh√†';
    
    // Ki·ªÉm tra c√≥ √≠t nh·∫•t 2 t·ª´ (ƒë∆∞·ªùng, ph∆∞·ªùng/x√£)
    const words = value.trim().split(/\s+/);
    if (words.length < 3) return 'ƒê·ªãa ch·ªâ ph·∫£i ƒë·∫ßy ƒë·ªß: s·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£';
    
    return null;
  },
  
  required: (value, fieldName) => {
    if (!value || value.trim() === '') {
      return `${fieldName} l√† b·∫Øt bu·ªôc`;
    }
    return null;
  }
};

// Enhanced Input Field with validation
const ValidatedInputField = ({ 
  label, 
  type, 
  field, 
  placeholder, 
  value, 
  onChange, 
  error, 
  validator,
  helpText
}) => {
  const [localError, setLocalError] = React.useState('');
  
  const handleBlur = () => {
    if (validator && value) {
      const validationError = validator(value);
      setLocalError(validationError || '');
    }
  };

  const displayError = error || localError;

  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-gray-700">
        {label} <span className="text-red-500">*</span>
      </label>
      <input
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        onBlur={handleBlur}
        className={`w-full px-4 py-3 border rounded-xl transition-colors ${
          displayError 
            ? 'border-red-500 bg-red-50' 
            : 'border-gray-300 focus:border-blue-500'
        } focus:ring-2 focus:ring-blue-200 focus:outline-none`}
      />
      {helpText && (
        <p className="text-xs text-gray-500">{helpText}</p>
      )}
      {displayError && (
        <p className="text-sm text-red-600">{displayError}</p>
      )}
    </div>
  );
};

// Step 1: User Type Selection
export const UserTypeStep = ({ userType, setUserType }) => (
  <div className="space-y-6">
    <h2 className="text-xl font-semibold text-center text-black">
      Ch·ªçn lo·∫°i t√†i kho·∫£n c·∫ßn x√°c minh
    </h2>
    
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div 
        onClick={() => setUserType('individual')}
        className={`p-6 border-2 rounded-xl cursor-pointer transition-all hover:shadow-lg ${
          userType === 'individual' 
            ? 'border-blue-500 bg-blue-50 shadow-md' 
            : 'border-gray-200 hover:border-blue-300'
        }`}
      >
        <div className="text-center">
          <User className="w-16 h-16 mx-auto mb-4 text-blue-600" />
          <h3 className="text-lg font-semibold mb-2 text-gray-600">C√° nh√¢n</h3>
          <p className="text-gray-600 text-sm">
            D√†nh cho kh√°ch h√†ng c√° nh√¢n
          </p>
        </div>
      </div>
      
      <div 
        onClick={() => setUserType('business')}
        className={`p-6 border-2 rounded-xl cursor-pointer transition-all hover:shadow-lg ${
          userType === 'business' 
            ? 'border-blue-500 bg-blue-50 shadow-md' 
            : 'border-gray-200 hover:border-blue-300'
        }`}
      >
        <div className="text-center">
          <Building2 className="w-16 h-16 mx-auto mb-4 text-blue-600" />
          <h3 className="text-lg font-semibold mb-2 text-gray-600">Doanh nghi·ªáp</h3>
          <p className="text-gray-600 text-sm">
            D√†nh cho c√¥ng ty v√† t·ªï ch·ª©c
          </p>
        </div>
      </div>
    </div>
  </div>
);

// Step 2: Information Form
export const InformationStep = ({ 
  userType, 
  formData, 
  handleInputChange, 
  errors,
  companyTypes,
  industries,
  employeeCounts
}) => (
  <div className="space-y-6">
    <h2 className="text-xl font-semibold text-center text-black">
      {userType === 'individual' ? 'Th√¥ng tin c√° nh√¢n' : 'Th√¥ng tin doanh nghi·ªáp'}
    </h2>
    
    {userType === 'individual' ? (
      <div className="space-y-4 text-black">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 ">
          <InputField
            label="H·ªç"
            type="text"
            field="firstName"
            placeholder="Nh·∫≠p h·ªç"
            value={formData.firstName}
            onChange={(e) => handleInputChange('firstName', e.target.value)}
            error={errors.firstName}
          />
          <InputField
            label="T√™n"
            type="text"
            field="lastName"
            placeholder="Nh·∫≠p t√™n"
            value={formData.lastName}
            onChange={(e) => handleInputChange('lastName', e.target.value)}
            error={errors.lastName}
          />
        </div>
        
        <InputField
          label="Email"
          type="email"
          field="email"
          placeholder="example@email.com"
          value={formData.email}
          onChange={(e) => handleInputChange('email', e.target.value)}
          error={errors.email}
        />
        
        <InputField
          label="S·ªë ƒëi·ªán tho·∫°i"
          type="tel"
          field="phone"
          placeholder="0123 456 789"
          value={formData.phone}
          onChange={(e) => handleInputChange('phone', e.target.value)}
          error={errors.phone}
        />

        {/* üî• TH√äM FIELD M·ªöI CHO C√Å NH√ÇN */}
        <InputField
          label="Ng√†y sinh"
          type="date"
          field="dateOfBirth"
          placeholder="dd/mm/yyyy"
          value={formData.dateOfBirth}
          onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}
          error={errors.dateOfBirth}
        />
        
        <ValidatedInputField
          label="ƒê·ªãa ch·ªâ"
          type="text"
          field="address"
          placeholder="S·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ph·ªë"
          value={formData.address}
          onChange={(e) => handleInputChange('address', e.target.value)}
          error={errors.address}
          validator={validators.address}
        />
        
        <InputField
          label="S·ªë CMND/CCCD"
          type="text"
          field="idNumber"
          placeholder="S·ªë gi·∫•y t·ªù t√πy th√¢n"
          value={formData.idNumber}
          onChange={(e) => handleInputChange('idNumber', e.target.value)}
          error={errors.idNumber}
        />

        {/* üî• TH√äM FIELD ADDRESS_WALLET CHO C√Å NH√ÇN */}
        <InputField
          label="ƒê·ªãa ch·ªâ v√≠ (Wallet Address)"
          type="text"
          field="address_wallet"
          placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ wallet"
          value={formData.address_wallet}
          onChange={(e) => handleInputChange('address_wallet', e.target.value)}
          error={errors.address_wallet}
        />
      </div>
    ) : (
      <div className="space-y-4 text-black">
        <ValidatedInputField
          label="T√™n c√¥ng ty"
          type="text"
          field="name_company"
          placeholder="T√™n c√¥ng ty ƒë·∫ßy ƒë·ªß"
          value={formData.name_company}
          onChange={(e) => handleInputChange('name_company', e.target.value)}
          error={errors.name_company}
          validator={validators.companyName}
        />
        
        <SelectField
          label="Lo·∫°i h√¨nh doanh nghi·ªáp"
          field="type_company"
          placeholder="Ch·ªçn lo·∫°i h√¨nh doanh nghi·ªáp"
          value={formData.type_company}
          onChange={(e) => handleInputChange('type_company', e.target.value)}
          error={errors.type_company}
          options={companyTypes}
        />
        
        <InputField
          label="Ng√†y th√†nh l·∫≠p"
          type="date"
          field="establishment_date"
          placeholder="dd/mm/yyyy"
          value={formData.establishment_date}
          onChange={(e) => handleInputChange('establishment_date', e.target.value)}
          error={errors.establishment_date}
        />
        
        <InputField
          label="S·ªë ƒëƒÉng k√Ω kinh doanh"
          type="text"
          field="business_registration_number"
          placeholder="S·ªë gi·∫•y ch·ª©ng nh·∫≠n ƒëƒÉng k√Ω kinh doanh"
          value={formData.business_registration_number}
          onChange={(e) => handleInputChange('business_registration_number', e.target.value)}
          error={errors.business_registration_number}
        />
        
        <ValidatedInputField
          label="ƒê·ªãa ch·ªâ c√¥ng ty"
          type="text"
          field="address"
          placeholder="S·ªë nh√†, ƒë∆∞·ªùng, ph∆∞·ªùng/x√£, qu·∫≠n/huy·ªán, t·ªânh/th√†nh ph·ªë"
          value={formData.address}
          onChange={(e) => handleInputChange('address', e.target.value)}
          error={errors.address}
          validator={validators.address}

        />
        
        <InputField
          label="ƒê·ªãa ch·ªâ v√≠ (Wallet Address)"
          type="text"
          field="address_wallet"
          placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ v√≠ wallet"
          value={formData.address_wallet}
          onChange={(e) => handleInputChange('address_wallet', e.target.value)}
          error={errors.address_wallet}
        />
        
        <SelectField
          label="Lƒ©nh v·ª±c kinh doanh"
          field="career"
          placeholder="Ch·ªçn lƒ©nh v·ª±c kinh doanh"
          value={formData.career}
          onChange={(e) => handleInputChange('career', e.target.value)}
          error={errors.career}
          options={industries}
        />
        
        <SelectField
          label="S·ªë l∆∞·ª£ng nh√¢n vi√™n"
          field="number_of_employees"
          placeholder="Ch·ªçn s·ªë l∆∞·ª£ng nh√¢n vi√™n"
          value={formData.number_of_employees}
          onChange={(e) => handleInputChange('number_of_employees', e.target.value)}
          error={errors.number_of_employees}
          options={employeeCounts}
        />
        
        <InputField
          label="Email c√¥ng ty"
          type="email"
          field="email"
          placeholder="contact@company.com"
          value={formData.email}
          onChange={(e) => handleInputChange('email', e.target.value)}
          error={errors.email}
        />
      </div>
    )}
    

  </div>
);

// Step 3: Document Upload
export const DocumentUploadStep = ({ 
  userType, 
  uploadedFiles, 
  handleFileUpload, 
  removeFile, 
  errors,
}) => (
  <div className="space-y-6">
    <h2 className="text-xl font-semibold text-center text-black">
      T·∫£i l√™n t√†i li·ªáu x√°c minh
    </h2>
    
    <div className="space-y-6">
      {userType === 'individual' ? (
        <>
          <FileUploadArea
            field="front_cccd_image"
            label="·∫¢nh m·∫∑t tr∆∞·ªõc CMND/CCCD"
            accept="image/*"
            description="Ch·ª•p r√µ n√©t m·∫∑t tr∆∞·ªõc gi·∫•y t·ªù t√πy th√¢n"
            hasFile={uploadedFiles.front_cccd_image}
            onFileUpload={handleFileUpload}
            onRemoveFile={removeFile}
            error={errors.front_cccd_image}
          />
          
          <FileUploadArea
            field="back_cccd_image"
            label="·∫¢nh m·∫∑t sau CMND/CCCD"
            accept="image/*"
            description="Ch·ª•p r√µ n√©t m·∫∑t sau gi·∫•y t·ªù t√πy th√¢n"
            hasFile={uploadedFiles.back_cccd_image}
            onFileUpload={handleFileUpload}
            onRemoveFile={removeFile}
            error={errors.back_cccd_image}
          />
        </>
      ) : (
        <>
          <FileUploadArea
            field="certification_image"
            label="Gi·∫•y ch·ª©ng nh·∫≠n ƒëƒÉng k√Ω kinh doanh"
            accept="image/*,application/pdf"
            description="Gi·∫•y ch·ª©ng nh·∫≠n ƒëƒÉng k√Ω kinh doanh c·ªßa c√¥ng ty"
            hasFile={uploadedFiles.certification_image}
            onFileUpload={handleFileUpload}
            onRemoveFile={removeFile}
            error={errors.certification_image}
          />
          
          <FileUploadArea
            field="front_cccd_image"
            label="CMND/CCCD m·∫∑t tr∆∞·ªõc ng∆∞·ªùi ƒë·∫°i di·ªán"
            accept="image/*"
            description="·∫¢nh m·∫∑t tr∆∞·ªõc CMND/CCCD c·ªßa ng∆∞·ªùi ƒë·∫°i di·ªán ph√°p lu·∫≠t"
            hasFile={uploadedFiles.front_cccd_image}
            onFileUpload={handleFileUpload}
            onRemoveFile={removeFile}
            error={errors.front_cccd_image}
          />
          
          <FileUploadArea
            field="back_cccd_image"
            label="CMND/CCCD m·∫∑t sau ng∆∞·ªùi ƒë·∫°i di·ªán"
            accept="image/*"
            description="·∫¢nh m·∫∑t sau CMND/CCCD c·ªßa ng∆∞·ªùi ƒë·∫°i di·ªán ph√°p lu·∫≠t"
            hasFile={uploadedFiles.back_cccd_image}
            onFileUpload={handleFileUpload}
            onRemoveFile={removeFile}
            error={errors.back_cccd_image}
          />
        </>
      )}
    </div>
    
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
      <h4 className="font-medium text-blue-800 mb-2">L∆∞u √Ω:</h4>
      <ul className="text-sm text-blue-700 space-y-1">
        <li>‚Ä¢ T√†i li·ªáu ph·∫£i r√µ n√©t, ƒë·∫ßy ƒë·ªß th√¥ng tin</li>
        <li>‚Ä¢ H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, PNG, PDF (t·ªëi ƒëa 5MB)</li>
        <li>‚Ä¢ ƒê·∫£m b·∫£o gi·∫•y t·ªù c√≤n hi·ªáu l·ª±c</li>
        <li>‚Ä¢ Th√¥ng tin tr√™n gi·∫•y t·ªù ph·∫£i kh·ªõp v·ªõi th√¥ng tin ƒë√£ nh·∫≠p</li>
      </ul>
    </div>
  </div>
);